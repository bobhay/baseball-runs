lam.best=lasso.tr$lambda[order(rmse)[1]]
lam.best
coef(lasso.tr,s=lam.best)
```
names(cv.glmnet)
?cv.glmnet
ls()
source("http://www.openintro.org/stat/data/present.R")
ls()
str(present)
dim(present)
names(present)
length(present$girls)
plot(present$girls)
plot(present$girls, present$year)
plot(present$year, present$girls)
plot(present$year, present$boys)
plot(present$year, present$boys + present$girls)
present$year(1960)
present[, 10]
plot(present$year, present$boys/present$girls)
A <- present$boys > present$girls
summary(A)
B <- (present$boys - present$girls)
summary(B)
plot(present$year, B)
present[15:25, ]
plot(present$boys / present$girls)
plot(presnet$year, present$boys/present$girls)
plot(present$year, present$boys/present$girls)
X <- present$boys + present$girls
which.max(X)
present$year[22]
plot(present$year, present$boys / (present$boys + present$girls))
which.max(B)
present$year[24]
D <- c(present[,], B)
str(D)
rm(D)
cbind(present, B)
q()
ls()
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 +100
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
?':'
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq(5,10, length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my-seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 400)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name(c(my_char, "Bob"))
my_name <- c(my_char, "Bob")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <-
| x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x
i <- c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf= NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vext2) <- c("foo", "bar", "nofr")
names(vect2 <- c("foo", "bar", "nofr"))
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myvector <- 1:20
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, 5, 4)
myMatrix2 <- matrix(1:20, nrow=5, ncol=4)
myMatrix2 <- matrix(1:20, 4, 5 )
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patientss, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(MyData)
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames <- cnames
colnames(cnames)
colnames(myData) <- cnames
myData
ls()
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
str(iris)
summary(iris)
virg <- subset(iris, Species = "virginica")
summary(virg)
virg <- subset(iris, Species == "virginica")
dim(virg)
summary(virg)
apply(iris, 2, mean)
?apply
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
data(mtcars)
with(mtcars, tapply(mpg, cal, mean))
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
str(mtcars)
with(mtcars, tapply(mpg, hp, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
debug(ls)
ls()
n
wxit
exit
n
n
n
n
n
n
ls()
17/20
ls()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
ls()
names(vowel.train)
summary(vowel.train$y)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
set.seed(33833)
library(caret)
modFitRF <- train(y ~ ., method = "rf", data = "vowel.train", verbose=FALSE)
modFitRF <- train(y ~ ., method = "rf", data = vowel.train, verbose=FALSE)
modFit
modFitRF
firTestRF <- predict(modFitRF, vowel.test)
firTestRF
summary(firTestRF)
testres <- firTestRF == vowel.test$y
summary(testres)
274/ (188 + 274)
rm(firTestRF,modFitRF,testres)
str(vowel.train)
set.seed(33833)
modelRF <- train(y ~ ., data=vowel.train, method = "rf", verbose = FALSE)
names(modelRF)
modelRF
modelBoost <- train(y ~ ., data=vowel.train, method = "gbm", verbose = FALSE)
modelBoost
predB <- predict(modelRF, vowel.test,y, data=vowel.test)
predB <- predict(modelB, vowel.test)
predB <- predict(modelBoost, vowel.test)
predRF <- predict(modelRF, vowel.test)
names(predB)
predBtest <- predB == vowel.test$y
summary(predBtest)
predRFtest <- predRF == vowel.test$y
summary(predRFtest)
223 + 239
Bacc <- 239 / 462
RFacc <- 280 / 462
predBothtest <- predB == predRF
summary(predBothtest)
314 / 462
names(modelBoost)
names(modelRF)
modelBoost$fnalModel
modelBoost$finalModel
modelBoost$modelInfo
ls()
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
library(carat)
library(caret)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
names(adData)
RFmodel <- train(diagnosis ~ ., data=training, method="rf")
RFmodel
GBMmodel <- train(diagnosis ~ ., data=training, method="gbm")
RFmodel
GBMmodel
LDAmodel <- train(diagnosis ~ ., data=training, method="lda", verbose=FALSE)
warnings()
LDAmodel
RFmodel
GBMmodel
LDAmodel
GBpredict <- predict(GBmodel, testing)
GBMpredict <- predict(GBMmodel, testing)
LDApredict <- predict(LDAmodel, testing)
RFpredict <- predict(RFmodel, testing)
GBMres <- GBMpredict == testing$y
names(testing)[1]
GBMres <- GBMpredict == testing$diagnosis
LDAres <- LDApredict == testing$diagnosis
RFres <- RFpredict == testing$diagnosis
summary(GBMres)
summary(LDAres)
summary(RFres)
71/82
64/82
69/82
predDF <- data.frame(GBMpredict, LDApredict, RFpredict, testing$diagnosis)
names(predDF)
combinedmodel <- train(testing.diagnosis, method="rf", data=predDF)
predDF <- data.frame(GBMpredict, LDApredict, RFpredict, diag=testing$diagnosis)
names(predDF)
combinedmodel <- train(diag ~ ., method="rf", data=predDF)
combinedmodel
head(predDF)
predvoter <- predDF[ ,1:3]
head(predvoter)
str(predvoter)
predvoternum <- as.numeric(predvoter)
predvoter
predDF
82 - 10
72/82
ls()
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
str(training)
Lmodel <- train(CompressiveStrength ~., method ="lasso", data = training)
Lmodel
names(Lmodel)
Lmodel$coefnames
Lmodel$xlevels
Lmodel$modelInfo
names(Lmodel)
Lmodel$bestTune
Lmodel$terms
?plot.enet
names(Lmodel)
Lmodel$finalModel
plot(Lmdoel)
plot(Lmodel)
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(training)
Lmodel <- train(CompressiveStrength ~., method ="svm", data = training)
?caret
?caret.train
??caret
Lmodel <- train(CompressiveStrength ~., method ="svmLinear", data = training)
summary(Lmodel)
names(Lmodel)
Lmodel
SVMtest <- predict(Lmodel, training)
summary(SVMtest)
SVMtest <- predict(Lmodel, testing)
names(training)
confusionMatrix(SVMtest)
?confusionMatrix
myRMSE <- (SVMtest - testing$CompressiveStrength)^2
sum(myRMSE)
sqrt(29175)
rm(Lmodel)
rm(SVMtest)
rm(myRMSE)
library(e1071)
SVMmodel <- svm(CompressiveStrength ~., data = training)
testpred <- predict(SVMmodel, testing)
myRMSE <- (testpred - testing$CompressiveStrength)^2
sum(myRMSE)
mean(myRMSE)
ls()
library(caret)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(adData)
RFmodel <- train(diagnosis ~., method ="rf", data = training, verbose=FALSE)
LDAmodel <- train(diagnosis ~., method ="lda", data = training, verbose=FALSE)
LDAmodel
summary(LDA)
summary(LDAmodel)
LDAmodel
RFmodel
GBMmodel <- train(diagnosis ~., method ="gbm", data = training, verbose=FALSE)
GBMmodel
LDAmodel
RFmodel
RFtestPred <- predict(RFmodel, testing)
LDAtestPred <- predict(LDAmodel, testing)
GBMtestPred <- predict(GBMmodel, testing)
RFtestRes <- RFtestPred == testing$diagnosis
LDAtestRes <- LDAtestPred == testing$diagnosis
GBMtestRes <- GBMtestPred == testing$diagnosis
summary(RFtestRes)
66/82
summary(LDAtestRes)
63/82
summary(GBMtestRes)
64/82
str(training$diagnosis)
str(GBMtestPred)
# Quick Vote:
numVote <- as.numeric(GMBtestPred) + as.numeric(RFtestPred) + as.numeric(LDAtestPred)
numVote <- as.numeric(GBMtestPred) + as.numeric(RFtestPred) + as.numeric(LDAtestPred)
VoteResult <- ifelse(numvote > 4, "Control", "Impaired")
VoteResult <- ifelse(numVote > 4, "Control", "Impaired")
VoteFactor <- as.factor(VoteResult)
VoteTestResult <- VoteFactor == testing$diagnosis
summary(VoteTestResult)
67/82
predDF <- data.frame(GBMtestPred, LDAtestPred, RFtestPred, diag=testing$diagnosis)
dim(predDF)
combModFit <- train(diag ~ ., method="rf", data=predDF)
combPred <- predict(combModFit, predDF)
dim(combPred)
length(combPred)
combPredRes <- combPred == diag
combPred[1:5]
summary(combPred)
combPredRes <- combPred == testing$diagnosis
summary(combPredRes)
67.82
67/82
ls()
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
LassoModel <- train(CompressiveStrength ~., method ="lasso", data = training)
names(LassoModel)
LassoModel
names(LassoModel)
LassoModel$bestTune
length(LassoModel$pred)
dim(LassoModel$pred)
LassoModel$metric
LassoModel$finalModel
names(LassoModel)
LassoModel$xlevels
dim(LassoModel$xlevels)
LassoModel$resampledCM
LassoModel$maximize
LassoModel$control
names(LassoModel)
confusionMatrix(LassoModel)
9/15
library(e1071)
?svm
names(training)
SVMmodel <- svm(CompressiveStrength ~ ., data=training)
testPred <- predict(SVMmodel, testing)
MSE <- (testPred - training$CompressiveStrength)^2
testStrength <- training$CompressiveStrength
testStrength <- testing$CompressiveStrength
MSE <- (testPred - testStrength)^2
sum(MSE)
sqrt(sum(MSE))
(15+12+12+12) / (15*4)
mean(MSE)
sqrt(mean(MSE))
ls()
(15 + 12+12+12+17+21) / ((15 *4) +41)
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(shiny)
install.packages("shiny")
library(shiny)
?manipulate
gwtwd()
getwd()
geted()
getwd()
setwd("C:/Documents and Settings/Bob/Desktop/sabr")
library(shiny)
runApp("baseball-states")
shiny::runApp('baseball-states')
A <- "100"
B <- strtoi(A, base = 2)
B
C <- strtoi(A, base=2) + 1
C
strtoi("111", base=2) + 1
rm(list=ls())
shiny::runApp('baseball-states')
shiny::runApp('baseball-states')
?c
?paste
shiny::runApp('baseball-states')
shiny::runApp('baseball-states')
zdata <- read.csv("data/re1950-2010.csv")
getwd()
zdata <- read.csv("baseball-states/data/re1950-2010.csv")
zData
zdata
shiny::runApp('baseball-states')
shiny::runApp('baseball-states')
shiny::runApp('baseball-states')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='bobhay', token='B5ACE43BBA35BDB4D6B8FBD82696BB78', secret='TqHrEE/vm7plx6Smmqdc+9yIzS17wT8GF3GOo7WA')
getwd()
setwd("C:/Documents and Settings/Bob/Desktop/sabr/baseball-states")
runApp()
deployApp()
